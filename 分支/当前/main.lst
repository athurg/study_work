                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.8.0 #5117 (Jul 21 2008) (UNIX)
                              4 ; This file was generated Thu Oct  2 08:42:43 2008
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _CY
                             14 	.globl _AC
                             15 	.globl _F0
                             16 	.globl _RS1
                             17 	.globl _RS0
                             18 	.globl _OV
                             19 	.globl _F1
                             20 	.globl _P
                             21 	.globl _PS
                             22 	.globl _PT1
                             23 	.globl _PX1
                             24 	.globl _PT0
                             25 	.globl _PX0
                             26 	.globl _EA
                             27 	.globl _ES
                             28 	.globl _ET1
                             29 	.globl _EX1
                             30 	.globl _ET0
                             31 	.globl _EX0
                             32 	.globl _SM0
                             33 	.globl _SM1
                             34 	.globl _SM2
                             35 	.globl _REN
                             36 	.globl _TB8
                             37 	.globl _RB8
                             38 	.globl _TI
                             39 	.globl _RI
                             40 	.globl _TF1
                             41 	.globl _TR1
                             42 	.globl _TF0
                             43 	.globl _TR0
                             44 	.globl _IE1
                             45 	.globl _IT1
                             46 	.globl _IE0
                             47 	.globl _IT0
                             48 	.globl _RD
                             49 	.globl _WR
                             50 	.globl _T1
                             51 	.globl _T0
                             52 	.globl _INT1
                             53 	.globl _INT0
                             54 	.globl _TXD
                             55 	.globl _RXD
                             56 	.globl _P3_7
                             57 	.globl _P3_6
                             58 	.globl _P3_5
                             59 	.globl _P3_4
                             60 	.globl _P3_3
                             61 	.globl _P3_2
                             62 	.globl _P3_1
                             63 	.globl _P3_0
                             64 	.globl _P2_7
                             65 	.globl _P2_6
                             66 	.globl _P2_5
                             67 	.globl _P2_4
                             68 	.globl _P2_3
                             69 	.globl _P2_2
                             70 	.globl _P2_1
                             71 	.globl _P2_0
                             72 	.globl _P1_7
                             73 	.globl _P1_6
                             74 	.globl _P1_5
                             75 	.globl _P1_4
                             76 	.globl _P1_3
                             77 	.globl _P1_2
                             78 	.globl _P1_1
                             79 	.globl _P1_0
                             80 	.globl _P0_7
                             81 	.globl _P0_6
                             82 	.globl _P0_5
                             83 	.globl _P0_4
                             84 	.globl _P0_3
                             85 	.globl _P0_2
                             86 	.globl _P0_1
                             87 	.globl _P0_0
                             88 	.globl _B
                             89 	.globl _ACC
                             90 	.globl _PSW
                             91 	.globl _IP
                             92 	.globl _IE
                             93 	.globl _SBUF
                             94 	.globl _SCON
                             95 	.globl _TH1
                             96 	.globl _TH0
                             97 	.globl _TL1
                             98 	.globl _TL0
                             99 	.globl _TMOD
                            100 	.globl _TCON
                            101 	.globl _PCON
                            102 	.globl _DPH
                            103 	.globl _DPL
                            104 	.globl _SP
                            105 	.globl _P3
                            106 	.globl _P2
                            107 	.globl _P1
                            108 	.globl _P0
                            109 	.globl _sign
                            110 	.globl _keycache
                            111 	.globl _stand_pos
                            112 	.globl _stand_str
                            113 	.globl _state
                            114 	.globl _keypad_interrupt
                            115 	.globl _flush
                            116 	.globl _refresh
                            117 	.globl _interrupt_init
                            118 ;--------------------------------------------------------
                            119 ; special function registers
                            120 ;--------------------------------------------------------
                            121 	.area RSEG    (DATA)
                    0080    122 _P0	=	0x0080
                    0090    123 _P1	=	0x0090
                    00A0    124 _P2	=	0x00a0
                    00B0    125 _P3	=	0x00b0
                    0081    126 _SP	=	0x0081
                    0082    127 _DPL	=	0x0082
                    0083    128 _DPH	=	0x0083
                    0087    129 _PCON	=	0x0087
                    0088    130 _TCON	=	0x0088
                    0089    131 _TMOD	=	0x0089
                    008A    132 _TL0	=	0x008a
                    008B    133 _TL1	=	0x008b
                    008C    134 _TH0	=	0x008c
                    008D    135 _TH1	=	0x008d
                    0098    136 _SCON	=	0x0098
                    0099    137 _SBUF	=	0x0099
                    00A8    138 _IE	=	0x00a8
                    00B8    139 _IP	=	0x00b8
                    00D0    140 _PSW	=	0x00d0
                    00E0    141 _ACC	=	0x00e0
                    00F0    142 _B	=	0x00f0
                            143 ;--------------------------------------------------------
                            144 ; special function bits
                            145 ;--------------------------------------------------------
                            146 	.area RSEG    (DATA)
                    0080    147 _P0_0	=	0x0080
                    0081    148 _P0_1	=	0x0081
                    0082    149 _P0_2	=	0x0082
                    0083    150 _P0_3	=	0x0083
                    0084    151 _P0_4	=	0x0084
                    0085    152 _P0_5	=	0x0085
                    0086    153 _P0_6	=	0x0086
                    0087    154 _P0_7	=	0x0087
                    0090    155 _P1_0	=	0x0090
                    0091    156 _P1_1	=	0x0091
                    0092    157 _P1_2	=	0x0092
                    0093    158 _P1_3	=	0x0093
                    0094    159 _P1_4	=	0x0094
                    0095    160 _P1_5	=	0x0095
                    0096    161 _P1_6	=	0x0096
                    0097    162 _P1_7	=	0x0097
                    00A0    163 _P2_0	=	0x00a0
                    00A1    164 _P2_1	=	0x00a1
                    00A2    165 _P2_2	=	0x00a2
                    00A3    166 _P2_3	=	0x00a3
                    00A4    167 _P2_4	=	0x00a4
                    00A5    168 _P2_5	=	0x00a5
                    00A6    169 _P2_6	=	0x00a6
                    00A7    170 _P2_7	=	0x00a7
                    00B0    171 _P3_0	=	0x00b0
                    00B1    172 _P3_1	=	0x00b1
                    00B2    173 _P3_2	=	0x00b2
                    00B3    174 _P3_3	=	0x00b3
                    00B4    175 _P3_4	=	0x00b4
                    00B5    176 _P3_5	=	0x00b5
                    00B6    177 _P3_6	=	0x00b6
                    00B7    178 _P3_7	=	0x00b7
                    00B0    179 _RXD	=	0x00b0
                    00B1    180 _TXD	=	0x00b1
                    00B2    181 _INT0	=	0x00b2
                    00B3    182 _INT1	=	0x00b3
                    00B4    183 _T0	=	0x00b4
                    00B5    184 _T1	=	0x00b5
                    00B6    185 _WR	=	0x00b6
                    00B7    186 _RD	=	0x00b7
                    0088    187 _IT0	=	0x0088
                    0089    188 _IE0	=	0x0089
                    008A    189 _IT1	=	0x008a
                    008B    190 _IE1	=	0x008b
                    008C    191 _TR0	=	0x008c
                    008D    192 _TF0	=	0x008d
                    008E    193 _TR1	=	0x008e
                    008F    194 _TF1	=	0x008f
                    0098    195 _RI	=	0x0098
                    0099    196 _TI	=	0x0099
                    009A    197 _RB8	=	0x009a
                    009B    198 _TB8	=	0x009b
                    009C    199 _REN	=	0x009c
                    009D    200 _SM2	=	0x009d
                    009E    201 _SM1	=	0x009e
                    009F    202 _SM0	=	0x009f
                    00A8    203 _EX0	=	0x00a8
                    00A9    204 _ET0	=	0x00a9
                    00AA    205 _EX1	=	0x00aa
                    00AB    206 _ET1	=	0x00ab
                    00AC    207 _ES	=	0x00ac
                    00AF    208 _EA	=	0x00af
                    00B8    209 _PX0	=	0x00b8
                    00B9    210 _PT0	=	0x00b9
                    00BA    211 _PX1	=	0x00ba
                    00BB    212 _PT1	=	0x00bb
                    00BC    213 _PS	=	0x00bc
                    00D0    214 _P	=	0x00d0
                    00D1    215 _F1	=	0x00d1
                    00D2    216 _OV	=	0x00d2
                    00D3    217 _RS0	=	0x00d3
                    00D4    218 _RS1	=	0x00d4
                    00D5    219 _F0	=	0x00d5
                    00D6    220 _AC	=	0x00d6
                    00D7    221 _CY	=	0x00d7
                            222 ;--------------------------------------------------------
                            223 ; overlayable register banks
                            224 ;--------------------------------------------------------
                            225 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     226 	.ds 8
                            227 ;--------------------------------------------------------
                            228 ; overlayable bit register bank
                            229 ;--------------------------------------------------------
                            230 	.area BIT_BANK	(REL,OVR,DATA)
   0000                     231 bits:
   0000                     232 	.ds 1
                    8000    233 	b0 = bits[0]
                    8100    234 	b1 = bits[1]
                    8200    235 	b2 = bits[2]
                    8300    236 	b3 = bits[3]
                    8400    237 	b4 = bits[4]
                    8500    238 	b5 = bits[5]
                    8600    239 	b6 = bits[6]
                    8700    240 	b7 = bits[7]
                            241 ;--------------------------------------------------------
                            242 ; internal ram data
                            243 ;--------------------------------------------------------
                            244 	.area DSEG    (DATA)
   0000                     245 _state::
   0000                     246 	.ds 1
   0001                     247 _stand_str::
   0001                     248 	.ds 38
   0027                     249 _stand_pos::
   0027                     250 	.ds 1
   0028                     251 _keycache::
   0028                     252 	.ds 4
   002C                     253 _sign::
   002C                     254 	.ds 6
   0032                     255 _keypad_interrupt_key_1_1:
   0032                     256 	.ds 2
   0034                     257 _keypad_interrupt_sloc0_1_0:
   0034                     258 	.ds 4
                            259 ;--------------------------------------------------------
                            260 ; overlayable items in internal ram 
                            261 ;--------------------------------------------------------
                            262 	.area OSEG    (OVR,DATA)
                            263 ;--------------------------------------------------------
                            264 ; Stack segment in internal ram 
                            265 ;--------------------------------------------------------
                            266 	.area	SSEG	(DATA)
   0000                     267 __start__stack:
   0000                     268 	.ds	1
                            269 
                            270 ;--------------------------------------------------------
                            271 ; indirectly addressable internal ram data
                            272 ;--------------------------------------------------------
                            273 	.area ISEG    (DATA)
                            274 ;--------------------------------------------------------
                            275 ; absolute internal ram data
                            276 ;--------------------------------------------------------
                            277 	.area IABS    (ABS,DATA)
                            278 	.area IABS    (ABS,DATA)
                            279 ;--------------------------------------------------------
                            280 ; bit data
                            281 ;--------------------------------------------------------
                            282 	.area BSEG    (BIT)
                            283 ;--------------------------------------------------------
                            284 ; paged external ram data
                            285 ;--------------------------------------------------------
                            286 	.area PSEG    (PAG,XDATA)
                            287 ;--------------------------------------------------------
                            288 ; external ram data
                            289 ;--------------------------------------------------------
                            290 	.area XSEG    (XDATA)
                            291 ;--------------------------------------------------------
                            292 ; absolute external ram data
                            293 ;--------------------------------------------------------
                            294 	.area XABS    (ABS,XDATA)
                            295 ;--------------------------------------------------------
                            296 ; external initialized ram data
                            297 ;--------------------------------------------------------
                            298 	.area XISEG   (XDATA)
                            299 	.area HOME    (CODE)
                            300 	.area GSINIT0 (CODE)
                            301 	.area GSINIT1 (CODE)
                            302 	.area GSINIT2 (CODE)
                            303 	.area GSINIT3 (CODE)
                            304 	.area GSINIT4 (CODE)
                            305 	.area GSINIT5 (CODE)
                            306 	.area GSINIT  (CODE)
                            307 	.area GSFINAL (CODE)
                            308 	.area CSEG    (CODE)
                            309 ;--------------------------------------------------------
                            310 ; interrupt vector 
                            311 ;--------------------------------------------------------
                            312 	.area HOME    (CODE)
   0000                     313 __interrupt_vect:
   0000 02s00r00            314 	ljmp	__sdcc_gsinit_startup
   0003 02s00r00            315 	ljmp	_keypad_interrupt
                            316 ;--------------------------------------------------------
                            317 ; global & static initialisations
                            318 ;--------------------------------------------------------
                            319 	.area HOME    (CODE)
                            320 	.area GSINIT  (CODE)
                            321 	.area GSFINAL (CODE)
                            322 	.area GSINIT  (CODE)
                            323 	.globl __sdcc_gsinit_startup
                            324 	.globl __sdcc_program_startup
                            325 	.globl __start__stack
                            326 	.globl __mcs51_genXINIT
                            327 	.globl __mcs51_genXRAMCLEAR
                            328 	.globl __mcs51_genRAMCLEAR
                            329 ;	main.c:17: char state=0;	//状态变量,0为待机,W波形,F频率,A幅度
   0000 75*00 00            330 	mov	_state,#0x00
                            331 ;	main.c:18: char stand_str[38]="     Wave;F=     KHz;A=   Vol   ";
   0003 75*01 20            332 	mov	_stand_str,#0x20
   0006 75*02 20            333 	mov	(_stand_str + 0x0001),#0x20
   0009 75*03 20            334 	mov	(_stand_str + 0x0002),#0x20
   000C 75*04 20            335 	mov	(_stand_str + 0x0003),#0x20
   000F 75*05 20            336 	mov	(_stand_str + 0x0004),#0x20
   0012 75*06 57            337 	mov	(_stand_str + 0x0005),#0x57
   0015 75*07 61            338 	mov	(_stand_str + 0x0006),#0x61
   0018 75*08 76            339 	mov	(_stand_str + 0x0007),#0x76
   001B 75*09 65            340 	mov	(_stand_str + 0x0008),#0x65
   001E 75*0A 3B            341 	mov	(_stand_str + 0x0009),#0x3B
   0021 75*0B 46            342 	mov	(_stand_str + 0x000a),#0x46
   0024 75*0C 3D            343 	mov	(_stand_str + 0x000b),#0x3D
   0027 75*0D 20            344 	mov	(_stand_str + 0x000c),#0x20
   002A 75*0E 20            345 	mov	(_stand_str + 0x000d),#0x20
   002D 75*0F 20            346 	mov	(_stand_str + 0x000e),#0x20
   0030 75*10 20            347 	mov	(_stand_str + 0x000f),#0x20
   0033 75*11 20            348 	mov	(_stand_str + 0x0010),#0x20
   0036 75*12 4B            349 	mov	(_stand_str + 0x0011),#0x4B
   0039 75*13 48            350 	mov	(_stand_str + 0x0012),#0x48
   003C 75*14 7A            351 	mov	(_stand_str + 0x0013),#0x7A
   003F 75*15 3B            352 	mov	(_stand_str + 0x0014),#0x3B
   0042 75*16 41            353 	mov	(_stand_str + 0x0015),#0x41
   0045 75*17 3D            354 	mov	(_stand_str + 0x0016),#0x3D
   0048 75*18 20            355 	mov	(_stand_str + 0x0017),#0x20
   004B 75*19 20            356 	mov	(_stand_str + 0x0018),#0x20
   004E 75*1A 20            357 	mov	(_stand_str + 0x0019),#0x20
   0051 75*1B 56            358 	mov	(_stand_str + 0x001a),#0x56
   0054 75*1C 6F            359 	mov	(_stand_str + 0x001b),#0x6F
   0057 75*1D 6C            360 	mov	(_stand_str + 0x001c),#0x6C
   005A 75*1E 20            361 	mov	(_stand_str + 0x001d),#0x20
   005D 75*1F 20            362 	mov	(_stand_str + 0x001e),#0x20
   0060 75*20 20            363 	mov	(_stand_str + 0x001f),#0x20
   0063 75*21 00            364 	mov	(_stand_str + 0x0020),#0x00
                            365 ;	main.c:19: char stand_pos=0;	//控制待机时屏幕流动显示的位置；
   0066 75*27 00            366 	mov	_stand_pos,#0x00
                            367 ;	main.c:21: long int keycache=0;		//键盘输入缓存
   0069 E4                  368 	clr	a
   006A F5*28               369 	mov	_keycache,a
   006C F5*29               370 	mov	(_keycache + 1),a
   006E F5*2A               371 	mov	(_keycache + 2),a
   0070 F5*2B               372 	mov	(_keycache + 3),a
                            373 ;	main.c:26: }sign={1,1000,5};
   0072 75*2C 01            374 	mov	_sign,#0x01
   0075 75*2D E8            375 	mov	(_sign + 0x0001),#0xE8
   0078 75*2E 03            376 	mov	((_sign + 0x0001) + 1),#0x03
   007B 75*2F 00            377 	mov	((_sign + 0x0001) + 2),#0x00
   007E 75*30 00            378 	mov	((_sign + 0x0001) + 3),#0x00
   0081 75*31 05            379 	mov	(_sign + 0x0005),#0x05
                            380 	.area GSFINAL (CODE)
   0000 02s00r06            381 	ljmp	__sdcc_program_startup
                            382 ;--------------------------------------------------------
                            383 ; Home
                            384 ;--------------------------------------------------------
                            385 	.area HOME    (CODE)
                            386 	.area HOME    (CODE)
   0006                     387 __sdcc_program_startup:
   0006 12s03r0F            388 	lcall	_main
                            389 ;	return from main will lock up
   0009 80 FE               390 	sjmp .
                            391 ;--------------------------------------------------------
                            392 ; code
                            393 ;--------------------------------------------------------
                            394 	.area CSEG    (CODE)
                            395 ;------------------------------------------------------------
                            396 ;Allocation info for local variables in function 'keypad_interrupt'
                            397 ;------------------------------------------------------------
                            398 ;key                       Allocated with name '_keypad_interrupt_key_1_1'
                            399 ;sloc0                     Allocated with name '_keypad_interrupt_sloc0_1_0'
                            400 ;------------------------------------------------------------
                            401 ;	main.c:40: void keypad_interrupt(void) interrupt 0
                            402 ;	-----------------------------------------
                            403 ;	 function keypad_interrupt
                            404 ;	-----------------------------------------
   0000                     405 _keypad_interrupt:
                    0002    406 	ar2 = 0x02
                    0003    407 	ar3 = 0x03
                    0004    408 	ar4 = 0x04
                    0005    409 	ar5 = 0x05
                    0006    410 	ar6 = 0x06
                    0007    411 	ar7 = 0x07
                    0000    412 	ar0 = 0x00
                    0001    413 	ar1 = 0x01
   0000 C0*00               414 	push	bits
   0002 C0 E0               415 	push	acc
   0004 C0 F0               416 	push	b
   0006 C0 82               417 	push	dpl
   0008 C0 83               418 	push	dph
   000A C0 02               419 	push	(0+2)
   000C C0 03               420 	push	(0+3)
   000E C0 04               421 	push	(0+4)
   0010 C0 05               422 	push	(0+5)
   0012 C0 06               423 	push	(0+6)
   0014 C0 07               424 	push	(0+7)
   0016 C0 00               425 	push	(0+0)
   0018 C0 01               426 	push	(0+1)
   001A C0 D0               427 	push	psw
   001C 75 D0 00            428 	mov	psw,#0x00
                            429 ;	main.c:50: key=key_make(key_scan());
   001F 12s00r00            430 	lcall	_key_scan
   0022 12s00r00            431 	lcall	_key_make
   0025 E5 82               432 	mov	a,dpl
   0027 FA                  433 	mov	r2,a
   0028 F5*32               434 	mov	_keypad_interrupt_key_1_1,a
   002A 33                  435 	rlc	a
   002B 95 E0               436 	subb	a,acc
   002D F5*33               437 	mov	(_keypad_interrupt_key_1_1 + 1),a
                            438 ;	main.c:52: if(key>10){	//功能区
   002F C3                  439 	clr	c
   0030 74 0A               440 	mov	a,#0x0A
   0032 95*32               441 	subb	a,_keypad_interrupt_key_1_1
   0034 74 80               442 	mov	a,#(0x00 ^ 0x80)
   0036 85*33 F0            443 	mov	b,(_keypad_interrupt_key_1_1 + 1)
   0039 63 F0 80            444 	xrl	b,#0x80
   003C 95 F0               445 	subb	a,b
   003E 50 2D               446 	jnc	00110$
                            447 ;	main.c:53: key-=20;
   0040 E5*32               448 	mov	a,_keypad_interrupt_key_1_1
   0042 24 EC               449 	add	a,#0xec
   0044 F5*32               450 	mov	_keypad_interrupt_key_1_1,a
   0046 E5*33               451 	mov	a,(_keypad_interrupt_key_1_1 + 1)
   0048 34 FF               452 	addc	a,#0xff
   004A F5*33               453 	mov	(_keypad_interrupt_key_1_1 + 1),a
                            454 ;	main.c:54: if(key==4)		flush();	//功能处理
   004C 74 04               455 	mov	a,#0x04
   004E B5*32 06            456 	cjne	a,_keypad_interrupt_key_1_1,00122$
   0051 E4                  457 	clr	a
   0052 B5*33 02            458 	cjne	a,(_keypad_interrupt_key_1_1 + 1),00122$
   0055 80 02               459 	sjmp	00123$
   0057                     460 00122$:
   0057 80 05               461 	sjmp	00102$
   0059                     462 00123$:
   0059 12s01r14            463 	lcall	_flush
   005C 80 03               464 	sjmp	00103$
   005E                     465 00102$:
                            466 ;	main.c:55: else			state=key;
   005E 85*32*00            467 	mov	_state,_keypad_interrupt_key_1_1
   0061                     468 00103$:
                            469 ;	main.c:56: keycache=0;	//清空输入缓存
   0061 E4                  470 	clr	a
   0062 F5*28               471 	mov	_keycache,a
   0064 F5*29               472 	mov	(_keycache + 1),a
   0066 F5*2A               473 	mov	(_keycache + 2),a
   0068 F5*2B               474 	mov	(_keycache + 3),a
   006A 02s00rEE            475 	ljmp	00111$
   006D                     476 00110$:
                            477 ;	main.c:57: }else if(state){	//非设置状态的数字按键丢弃
   006D E5*00               478 	mov	a,_state
   006F 70 03               479 	jnz	00124$
   0071 02s00rEE            480 	ljmp	00111$
   0074                     481 00124$:
                            482 ;	main.c:58: if(state==1)	keycache=key;//波形选择只收集一次按键
   0074 74 01               483 	mov	a,#0x01
   0076 B5*00 10            484 	cjne	a,_state,00105$
   0079 85*32*28            485 	mov	_keycache,_keypad_interrupt_key_1_1
   007C E5*33               486 	mov	a,(_keypad_interrupt_key_1_1 + 1)
   007E F5*29               487 	mov	(_keycache + 1),a
   0080 33                  488 	rlc	a
   0081 95 E0               489 	subb	a,acc
   0083 F5*2A               490 	mov	(_keycache + 2),a
   0085 F5*2B               491 	mov	(_keycache + 3),a
   0087 80 65               492 	sjmp	00111$
   0089                     493 00105$:
                            494 ;	main.c:59: else		keycache=keycache>999999999 ? 0 : (key+keycache*10);	//频率幅度需要叠加
   0089 C3                  495 	clr	c
   008A 74 FF               496 	mov	a,#0xFF
   008C 95*28               497 	subb	a,_keycache
   008E 74 C9               498 	mov	a,#0xC9
   0090 95*29               499 	subb	a,(_keycache + 1)
   0092 74 9A               500 	mov	a,#0x9A
   0094 95*2A               501 	subb	a,(_keycache + 2)
   0096 74 BB               502 	mov	a,#(0x3B ^ 0x80)
   0098 85*2B F0            503 	mov	b,(_keycache + 3)
   009B 63 F0 80            504 	xrl	b,#0x80
   009E 95 F0               505 	subb	a,b
   00A0 50 0A               506 	jnc	00114$
   00A2 7C 00               507 	mov	r4,#0x00
   00A4 7D 00               508 	mov	r5,#0x00
   00A6 7E 00               509 	mov	r6,#0x00
   00A8 7F 00               510 	mov	r7,#0x00
   00AA 80 3A               511 	sjmp	00115$
   00AC                     512 00114$:
   00AC 85*28*00            513 	mov	__mullong_PARM_2,_keycache
   00AF 85*29*01            514 	mov	(__mullong_PARM_2 + 1),(_keycache + 1)
   00B2 85*2A*02            515 	mov	(__mullong_PARM_2 + 2),(_keycache + 2)
   00B5 85*2B*03            516 	mov	(__mullong_PARM_2 + 3),(_keycache + 3)
   00B8 90 00 0A            517 	mov	dptr,#(0x0A&0x00ff)
   00BB E4                  518 	clr	a
   00BC F5 F0               519 	mov	b,a
   00BE 12s00r00            520 	lcall	__mullong
   00C1 85 82*34            521 	mov	_keypad_interrupt_sloc0_1_0,dpl
   00C4 85 83*35            522 	mov	(_keypad_interrupt_sloc0_1_0 + 1),dph
   00C7 85 F0*36            523 	mov	(_keypad_interrupt_sloc0_1_0 + 2),b
   00CA F5*37               524 	mov	(_keypad_interrupt_sloc0_1_0 + 3),a
   00CC AA*32               525 	mov	r2,_keypad_interrupt_key_1_1
   00CE E5*33               526 	mov	a,(_keypad_interrupt_key_1_1 + 1)
   00D0 FB                  527 	mov	r3,a
   00D1 33                  528 	rlc	a
   00D2 95 E0               529 	subb	a,acc
   00D4 F8                  530 	mov	r0,a
   00D5 F9                  531 	mov	r1,a
   00D6 E5*34               532 	mov	a,_keypad_interrupt_sloc0_1_0
   00D8 2A                  533 	add	a,r2
   00D9 FC                  534 	mov	r4,a
   00DA E5*35               535 	mov	a,(_keypad_interrupt_sloc0_1_0 + 1)
   00DC 3B                  536 	addc	a,r3
   00DD FD                  537 	mov	r5,a
   00DE E5*36               538 	mov	a,(_keypad_interrupt_sloc0_1_0 + 2)
   00E0 38                  539 	addc	a,r0
   00E1 FE                  540 	mov	r6,a
   00E2 E5*37               541 	mov	a,(_keypad_interrupt_sloc0_1_0 + 3)
   00E4 39                  542 	addc	a,r1
   00E5 FF                  543 	mov	r7,a
   00E6                     544 00115$:
   00E6 8C*28               545 	mov	_keycache,r4
   00E8 8D*29               546 	mov	(_keycache + 1),r5
   00EA 8E*2A               547 	mov	(_keycache + 2),r6
   00EC 8F*2B               548 	mov	(_keycache + 3),r7
   00EE                     549 00111$:
                            550 ;	main.c:61: refresh();
   00EE 12s01r45            551 	lcall	_refresh
                            552 ;	main.c:62: delay(1);
   00F1 75 82 01            553 	mov	dpl,#0x01
   00F4 12s00r00            554 	lcall	_delay
   00F7 D0 D0               555 	pop	psw
   00F9 D0 01               556 	pop	(0+1)
   00FB D0 00               557 	pop	(0+0)
   00FD D0 07               558 	pop	(0+7)
   00FF D0 06               559 	pop	(0+6)
   0101 D0 05               560 	pop	(0+5)
   0103 D0 04               561 	pop	(0+4)
   0105 D0 03               562 	pop	(0+3)
   0107 D0 02               563 	pop	(0+2)
   0109 D0 83               564 	pop	dph
   010B D0 82               565 	pop	dpl
   010D D0 F0               566 	pop	b
   010F D0 E0               567 	pop	acc
   0111 D0*00               568 	pop	bits
   0113 32                  569 	reti
                            570 ;------------------------------------------------------------
                            571 ;Allocation info for local variables in function 'flush'
                            572 ;------------------------------------------------------------
                            573 ;------------------------------------------------------------
                            574 ;	main.c:65: void flush(void)
                            575 ;	-----------------------------------------
                            576 ;	 function flush
                            577 ;	-----------------------------------------
   0114                     578 _flush:
                            579 ;	main.c:67: switch(state){
   0114 74 01               580 	mov	a,#0x01
   0116 B5*00 02            581 	cjne	a,_state,00110$
   0119 80 0E               582 	sjmp	00101$
   011B                     583 00110$:
   011B 74 02               584 	mov	a,#0x02
   011D B5*00 02            585 	cjne	a,_state,00111$
   0120 80 0D               586 	sjmp	00102$
   0122                     587 00111$:
   0122 74 03               588 	mov	a,#0x03
                            589 ;	main.c:68: case 1:
   0124 B5*00 1A            590 	cjne	a,_state,00104$
   0127 80 14               591 	sjmp	00103$
   0129                     592 00101$:
                            593 ;	main.c:69: sign.w=keycache;
   0129 AA*28               594 	mov	r2,_keycache
   012B 8A*2C               595 	mov	_sign,r2
                            596 ;	main.c:70: break;
                            597 ;	main.c:71: case 2:
   012D 80 12               598 	sjmp	00104$
   012F                     599 00102$:
                            600 ;	main.c:72: sign.f=keycache;
   012F 85*28*2D            601 	mov	(_sign + 0x0001),_keycache
   0132 85*29*2E            602 	mov	((_sign + 0x0001) + 1),(_keycache + 1)
   0135 85*2A*2F            603 	mov	((_sign + 0x0001) + 2),(_keycache + 2)
   0138 85*2B*30            604 	mov	((_sign + 0x0001) + 3),(_keycache + 3)
                            605 ;	main.c:73: break;
                            606 ;	main.c:74: case 3:
   013B 80 04               607 	sjmp	00104$
   013D                     608 00103$:
                            609 ;	main.c:75: sign.a=keycache;
   013D AA*28               610 	mov	r2,_keycache
   013F 8A*31               611 	mov	(_sign + 0x0005),r2
                            612 ;	main.c:77: }
   0141                     613 00104$:
                            614 ;	main.c:81: state=0;		//处理完成恢复待机状态
   0141 75*00 00            615 	mov	_state,#0x00
   0144 22                  616 	ret
                            617 ;------------------------------------------------------------
                            618 ;Allocation info for local variables in function 'refresh'
                            619 ;------------------------------------------------------------
                            620 ;------------------------------------------------------------
                            621 ;	main.c:84: void refresh(void)
                            622 ;	-----------------------------------------
                            623 ;	 function refresh
                            624 ;	-----------------------------------------
   0145                     625 _refresh:
                            626 ;	main.c:86: lcd_printsxy("                ",0,0);
   0145 75*00 00            627 	mov	_lcd_printsxy_PARM_2,#0x00
   0148 75*00 00            628 	mov	_lcd_printsxy_PARM_3,#0x00
   014B 90s00r00            629 	mov	dptr,#__str_0
   014E 75 F0 80            630 	mov	b,#0x80
   0151 12s00r00            631 	lcall	_lcd_printsxy
                            632 ;	main.c:87: lcd_printsxy("                ",0,1);
   0154 75*00 00            633 	mov	_lcd_printsxy_PARM_2,#0x00
   0157 75*00 01            634 	mov	_lcd_printsxy_PARM_3,#0x01
   015A 90s00r00            635 	mov	dptr,#__str_0
   015D 75 F0 80            636 	mov	b,#0x80
   0160 12s00r00            637 	lcall	_lcd_printsxy
                            638 ;	main.c:88: switch(state){
   0163 E4                  639 	clr	a
   0164 B5*00 02            640 	cjne	a,_state,00126$
   0167 80 1B               641 	sjmp	00101$
   0169                     642 00126$:
   0169 74 01               643 	mov	a,#0x01
   016B B5*00 03            644 	cjne	a,_state,00127$
   016E 02s02r01            645 	ljmp	00106$
   0171                     646 00127$:
   0171 74 02               647 	mov	a,#0x02
   0173 B5*00 03            648 	cjne	a,_state,00128$
   0176 02s02r92            649 	ljmp	00112$
   0179                     650 00128$:
   0179 74 03               651 	mov	a,#0x03
   017B B5*00 03            652 	cjne	a,_state,00129$
   017E 02s02rC6            653 	ljmp	00113$
   0181                     654 00129$:
   0181 02s02rF8            655 	ljmp	00114$
                            656 ;	main.c:89: case 0:
   0184                     657 00101$:
                            658 ;	main.c:90: switch(sign.w){
   0184 AA*2C               659 	mov	r2,_sign
   0186 BA 02 02            660 	cjne	r2,#0x02,00130$
   0189 80 05               661 	sjmp	00102$
   018B                     662 00130$:
                            663 ;	main.c:91: case 2:lcd_printsxy("Rect    A=   Vol",0,0);	break;
   018B BA 03 24            664 	cjne	r2,#0x03,00104$
   018E 80 11               665 	sjmp	00103$
   0190                     666 00102$:
   0190 75*00 00            667 	mov	_lcd_printsxy_PARM_2,#0x00
   0193 75*00 00            668 	mov	_lcd_printsxy_PARM_3,#0x00
   0196 90s00r11            669 	mov	dptr,#__str_1
   0199 75 F0 80            670 	mov	b,#0x80
   019C 12s00r00            671 	lcall	_lcd_printsxy
                            672 ;	main.c:92: case 3:lcd_printsxy("Tria    A=   Vol",0,0);	break;
   019F 80 20               673 	sjmp	00105$
   01A1                     674 00103$:
   01A1 75*00 00            675 	mov	_lcd_printsxy_PARM_2,#0x00
   01A4 75*00 00            676 	mov	_lcd_printsxy_PARM_3,#0x00
   01A7 90s00r22            677 	mov	dptr,#__str_2
   01AA 75 F0 80            678 	mov	b,#0x80
   01AD 12s00r00            679 	lcall	_lcd_printsxy
                            680 ;	main.c:93: default:lcd_printsxy("sine    A=   Vol",0,0);	break;
   01B0 80 0F               681 	sjmp	00105$
   01B2                     682 00104$:
   01B2 75*00 00            683 	mov	_lcd_printsxy_PARM_2,#0x00
   01B5 75*00 00            684 	mov	_lcd_printsxy_PARM_3,#0x00
   01B8 90s00r33            685 	mov	dptr,#__str_3
   01BB 75 F0 80            686 	mov	b,#0x80
   01BE 12s00r00            687 	lcall	_lcd_printsxy
                            688 ;	main.c:94: }
   01C1                     689 00105$:
                            690 ;	main.c:95: lcd_printsxy("F=       KHz",0,1);
   01C1 75*00 00            691 	mov	_lcd_printsxy_PARM_2,#0x00
   01C4 75*00 01            692 	mov	_lcd_printsxy_PARM_3,#0x01
   01C7 90s00r44            693 	mov	dptr,#__str_4
   01CA 75 F0 80            694 	mov	b,#0x80
   01CD 12s00r00            695 	lcall	_lcd_printsxy
                            696 ;	main.c:96: lcd_printnxy(sign.a,12,0);lcd_printnxy(sign.f,8,1);
   01D0 AA*31               697 	mov	r2,(_sign + 0x0005)
   01D2 E5*31               698 	mov	a,(_sign + 0x0005)
   01D4 33                  699 	rlc	a
   01D5 95 E0               700 	subb	a,acc
   01D7 FB                  701 	mov	r3,a
   01D8 FC                  702 	mov	r4,a
   01D9 FD                  703 	mov	r5,a
   01DA 75*00 0C            704 	mov	_lcd_printnxy_PARM_2,#0x0C
   01DD 75*00 00            705 	mov	_lcd_printnxy_PARM_3,#0x00
   01E0 8A 82               706 	mov	dpl,r2
   01E2 8B 83               707 	mov	dph,r3
   01E4 8C F0               708 	mov	b,r4
   01E6 ED                  709 	mov	a,r5
   01E7 12s00r00            710 	lcall	_lcd_printnxy
   01EA 75*00 08            711 	mov	_lcd_printnxy_PARM_2,#0x08
   01ED 75*00 01            712 	mov	_lcd_printnxy_PARM_3,#0x01
   01F0 85*2D 82            713 	mov	dpl,(_sign + 0x0001)
   01F3 85*2E 83            714 	mov	dph,((_sign + 0x0001) + 1)
   01F6 85*2F F0            715 	mov	b,((_sign + 0x0001) + 2)
   01F9 E5*30               716 	mov	a,((_sign + 0x0001) + 3)
   01FB 12s00r00            717 	lcall	_lcd_printnxy
                            718 ;	main.c:97: break;
   01FE 02s02rF8            719 	ljmp	00114$
                            720 ;	main.c:98: case 1:
   0201                     721 00106$:
                            722 ;	main.c:99: lcd_printsxy("Wave Select",0,0);
   0201 75*00 00            723 	mov	_lcd_printsxy_PARM_2,#0x00
   0204 75*00 00            724 	mov	_lcd_printsxy_PARM_3,#0x00
   0207 90s00r51            725 	mov	dptr,#__str_5
   020A 75 F0 80            726 	mov	b,#0x80
   020D 12s00r00            727 	lcall	_lcd_printsxy
                            728 ;	main.c:100: switch(keycache){
   0210 74 01               729 	mov	a,#0x01
   0212 B5*28 0E            730 	cjne	a,_keycache,00132$
   0215 E4                  731 	clr	a
   0216 B5*29 0A            732 	cjne	a,(_keycache + 1),00132$
   0219 E4                  733 	clr	a
   021A B5*2A 06            734 	cjne	a,(_keycache + 2),00132$
   021D E4                  735 	clr	a
   021E B5*2B 02            736 	cjne	a,(_keycache + 3),00132$
   0221 80 28               737 	sjmp	00107$
   0223                     738 00132$:
   0223 74 02               739 	mov	a,#0x02
   0225 B5*28 0E            740 	cjne	a,_keycache,00133$
   0228 E4                  741 	clr	a
   0229 B5*29 0A            742 	cjne	a,(_keycache + 1),00133$
   022C E4                  743 	clr	a
   022D B5*2A 06            744 	cjne	a,(_keycache + 2),00133$
   0230 E4                  745 	clr	a
   0231 B5*2B 02            746 	cjne	a,(_keycache + 3),00133$
   0234 80 27               747 	sjmp	00108$
   0236                     748 00133$:
   0236 74 03               749 	mov	a,#0x03
   0238 B5*28 0E            750 	cjne	a,_keycache,00134$
   023B E4                  751 	clr	a
   023C B5*29 0A            752 	cjne	a,(_keycache + 1),00134$
   023F E4                  753 	clr	a
   0240 B5*2A 06            754 	cjne	a,(_keycache + 2),00134$
   0243 E4                  755 	clr	a
   0244 B5*2B 02            756 	cjne	a,(_keycache + 3),00134$
   0247 80 26               757 	sjmp	00109$
   0249                     758 00134$:
                            759 ;	main.c:101: case 1: lcd_printsxy("Sine Wave",0,1);break;
   0249 80 36               760 	sjmp	00110$
   024B                     761 00107$:
   024B 75*00 00            762 	mov	_lcd_printsxy_PARM_2,#0x00
   024E 75*00 01            763 	mov	_lcd_printsxy_PARM_3,#0x01
   0251 90s00r5D            764 	mov	dptr,#__str_6
   0254 75 F0 80            765 	mov	b,#0x80
   0257 12s00r00            766 	lcall	_lcd_printsxy
   025A 02s02rF8            767 	ljmp	00114$
                            768 ;	main.c:102: case 2: lcd_printsxy("Deco Wave",0,1);break;
   025D                     769 00108$:
   025D 75*00 00            770 	mov	_lcd_printsxy_PARM_2,#0x00
   0260 75*00 01            771 	mov	_lcd_printsxy_PARM_3,#0x01
   0263 90s00r67            772 	mov	dptr,#__str_7
   0266 75 F0 80            773 	mov	b,#0x80
   0269 12s00r00            774 	lcall	_lcd_printsxy
   026C 02s02rF8            775 	ljmp	00114$
                            776 ;	main.c:103: case 3: lcd_printsxy("Tria Wave",0,1);break;
   026F                     777 00109$:
   026F 75*00 00            778 	mov	_lcd_printsxy_PARM_2,#0x00
   0272 75*00 01            779 	mov	_lcd_printsxy_PARM_3,#0x01
   0275 90s00r71            780 	mov	dptr,#__str_8
   0278 75 F0 80            781 	mov	b,#0x80
   027B 12s00r00            782 	lcall	_lcd_printsxy
   027E 02s02rF8            783 	ljmp	00114$
                            784 ;	main.c:104: default: lcd_printsxy("1.Sin 2.Dec 3.Tri",0,1);break;
   0281                     785 00110$:
   0281 75*00 00            786 	mov	_lcd_printsxy_PARM_2,#0x00
   0284 75*00 01            787 	mov	_lcd_printsxy_PARM_3,#0x01
   0287 90s00r7B            788 	mov	dptr,#__str_9
   028A 75 F0 80            789 	mov	b,#0x80
   028D 12s00r00            790 	lcall	_lcd_printsxy
                            791 ;	main.c:106: break;
                            792 ;	main.c:107: case 2:
   0290 80 66               793 	sjmp	00114$
   0292                     794 00112$:
                            795 ;	main.c:108: lcd_printsxy("Frequence Set",0,0);
   0292 75*00 00            796 	mov	_lcd_printsxy_PARM_2,#0x00
   0295 75*00 00            797 	mov	_lcd_printsxy_PARM_3,#0x00
   0298 90s00r8D            798 	mov	dptr,#__str_10
   029B 75 F0 80            799 	mov	b,#0x80
   029E 12s00r00            800 	lcall	_lcd_printsxy
                            801 ;	main.c:109: lcd_printsxy("KHz",13,1);
   02A1 75*00 0D            802 	mov	_lcd_printsxy_PARM_2,#0x0D
   02A4 75*00 01            803 	mov	_lcd_printsxy_PARM_3,#0x01
   02A7 90s00r9B            804 	mov	dptr,#__str_11
   02AA 75 F0 80            805 	mov	b,#0x80
   02AD 12s00r00            806 	lcall	_lcd_printsxy
                            807 ;	main.c:110: lcd_printnxy(keycache,12,1);
   02B0 75*00 0C            808 	mov	_lcd_printnxy_PARM_2,#0x0C
   02B3 75*00 01            809 	mov	_lcd_printnxy_PARM_3,#0x01
   02B6 85*28 82            810 	mov	dpl,_keycache
   02B9 85*29 83            811 	mov	dph,(_keycache + 1)
   02BC 85*2A F0            812 	mov	b,(_keycache + 2)
   02BF E5*2B               813 	mov	a,(_keycache + 3)
   02C1 12s00r00            814 	lcall	_lcd_printnxy
                            815 ;	main.c:111: break;
                            816 ;	main.c:112: case 3:
   02C4 80 32               817 	sjmp	00114$
   02C6                     818 00113$:
                            819 ;	main.c:113: lcd_printsxy("Ample Setting",0,0);
   02C6 75*00 00            820 	mov	_lcd_printsxy_PARM_2,#0x00
   02C9 75*00 00            821 	mov	_lcd_printsxy_PARM_3,#0x00
   02CC 90s00r9F            822 	mov	dptr,#__str_12
   02CF 75 F0 80            823 	mov	b,#0x80
   02D2 12s00r00            824 	lcall	_lcd_printsxy
                            825 ;	main.c:114: lcd_printsxy("Vol",13,1);
   02D5 75*00 0D            826 	mov	_lcd_printsxy_PARM_2,#0x0D
   02D8 75*00 01            827 	mov	_lcd_printsxy_PARM_3,#0x01
   02DB 90s00rAD            828 	mov	dptr,#__str_13
   02DE 75 F0 80            829 	mov	b,#0x80
   02E1 12s00r00            830 	lcall	_lcd_printsxy
                            831 ;	main.c:115: lcd_printnxy(keycache,12,1);
   02E4 75*00 0C            832 	mov	_lcd_printnxy_PARM_2,#0x0C
   02E7 75*00 01            833 	mov	_lcd_printnxy_PARM_3,#0x01
   02EA 85*28 82            834 	mov	dpl,_keycache
   02ED 85*29 83            835 	mov	dph,(_keycache + 1)
   02F0 85*2A F0            836 	mov	b,(_keycache + 2)
   02F3 E5*2B               837 	mov	a,(_keycache + 3)
   02F5 12s00r00            838 	lcall	_lcd_printnxy
                            839 ;	main.c:117: }
   02F8                     840 00114$:
                            841 ;	main.c:118: stand_pos=0;
   02F8 75*27 00            842 	mov	_stand_pos,#0x00
   02FB 22                  843 	ret
                            844 ;------------------------------------------------------------
                            845 ;Allocation info for local variables in function 'interrupt_init'
                            846 ;------------------------------------------------------------
                            847 ;------------------------------------------------------------
                            848 ;	main.c:128: void interrupt_init(void)
                            849 ;	-----------------------------------------
                            850 ;	 function interrupt_init
                            851 ;	-----------------------------------------
   02FC                     852 _interrupt_init:
                            853 ;	main.c:131: EX0=1;    EX1=0;	//外部中断
   02FC D2 A8               854 	setb	_EX0
   02FE C2 AA               855 	clr	_EX1
                            856 ;	main.c:132: ET0=0;    ET1=0;	//定时器中断
   0300 C2 A9               857 	clr	_ET0
   0302 C2 AB               858 	clr	_ET1
                            859 ;	main.c:133: ES =0;		//串行中断
   0304 C2 AC               860 	clr	_ES
                            861 ;	main.c:136: PX0=1;	//外部
   0306 D2 B8               862 	setb	_PX0
                            863 ;	main.c:137: PT0=0;	//定时器
   0308 C2 B9               864 	clr	_PT0
                            865 ;	main.c:140: IT1=0;	//低电平触发，设为1为下降沿触发
   030A C2 8A               866 	clr	_IT1
                            867 ;	main.c:142: EA=1;	//打开中断总开关
   030C D2 AF               868 	setb	_EA
   030E 22                  869 	ret
                            870 ;------------------------------------------------------------
                            871 ;Allocation info for local variables in function 'main'
                            872 ;------------------------------------------------------------
                            873 ;------------------------------------------------------------
                            874 ;	main.c:146: void main(void)
                            875 ;	-----------------------------------------
                            876 ;	 function main
                            877 ;	-----------------------------------------
   030F                     878 _main:
                            879 ;	main.c:149: lcd_init();	//LCD初始化
   030F 12s00r00            880 	lcall	_lcd_init
                            881 ;	main.c:150: interrupt_init();	//外部中断0初始化
   0312 12s02rFC            882 	lcall	_interrupt_init
                            883 ;	main.c:151: P1=0xf0;	//键盘初始化
   0315 75 90 F0            884 	mov	_P1,#0xF0
                            885 ;	main.c:152: refresh();
   0318 12s01r45            886 	lcall	_refresh
                            887 ;	main.c:153: while(1);
   031B                     888 00102$:
   031B 80 FE               889 	sjmp	00102$
                            890 	.area CSEG    (CODE)
                            891 	.area CONST   (CODE)
   0000                     892 __str_0:
   0000 20 20 20 20 20 20   893 	.ascii "                "
        20 20 20 20 20 20
        20 20 20 20
   0010 00                  894 	.db 0x00
   0011                     895 __str_1:
   0011 52 65 63 74 20 20   896 	.ascii "Rect    A=   Vol"
        20 20 41 3D 20 20
        20 56 6F 6C
   0021 00                  897 	.db 0x00
   0022                     898 __str_2:
   0022 54 72 69 61 20 20   899 	.ascii "Tria    A=   Vol"
        20 20 41 3D 20 20
        20 56 6F 6C
   0032 00                  900 	.db 0x00
   0033                     901 __str_3:
   0033 73 69 6E 65 20 20   902 	.ascii "sine    A=   Vol"
        20 20 41 3D 20 20
        20 56 6F 6C
   0043 00                  903 	.db 0x00
   0044                     904 __str_4:
   0044 46 3D 20 20 20 20   905 	.ascii "F=       KHz"
        20 20 20 4B 48 7A
   0050 00                  906 	.db 0x00
   0051                     907 __str_5:
   0051 57 61 76 65 20 53   908 	.ascii "Wave Select"
        65 6C 65 63 74
   005C 00                  909 	.db 0x00
   005D                     910 __str_6:
   005D 53 69 6E 65 20 57   911 	.ascii "Sine Wave"
        61 76 65
   0066 00                  912 	.db 0x00
   0067                     913 __str_7:
   0067 44 65 63 6F 20 57   914 	.ascii "Deco Wave"
        61 76 65
   0070 00                  915 	.db 0x00
   0071                     916 __str_8:
   0071 54 72 69 61 20 57   917 	.ascii "Tria Wave"
        61 76 65
   007A 00                  918 	.db 0x00
   007B                     919 __str_9:
   007B 31 2E 53 69 6E 20   920 	.ascii "1.Sin 2.Dec 3.Tri"
        32 2E 44 65 63 20
        33 2E 54 72 69
   008C 00                  921 	.db 0x00
   008D                     922 __str_10:
   008D 46 72 65 71 75 65   923 	.ascii "Frequence Set"
        6E 63 65 20 53 65
        74
   009A 00                  924 	.db 0x00
   009B                     925 __str_11:
   009B 4B 48 7A            926 	.ascii "KHz"
   009E 00                  927 	.db 0x00
   009F                     928 __str_12:
   009F 41 6D 70 6C 65 20   929 	.ascii "Ample Setting"
        53 65 74 74 69 6E
        67
   00AC 00                  930 	.db 0x00
   00AD                     931 __str_13:
   00AD 56 6F 6C            932 	.ascii "Vol"
   00B0 00                  933 	.db 0x00
                            934 	.area XINIT   (CODE)
                            935 	.area CABS    (ABS,CODE)
